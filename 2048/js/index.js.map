{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./random.js","webpack:///./View.js","webpack:///./CardMap.js","webpack:///./index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","min","max","temp","Math","floor","random","_random","View","id","arguments","length","undefined","_classCallCheck","this","$container","document","querySelector","$currScore","$bestScore","$msgBoard","$cardsBoard","$cardTemp","content","children","card","_ref2","_slicedToArray","_ref","row","col","nowRowClassName","exec","className","nowColClassName","rowClassName","colclassName","str","replace","num","_ref4","_ref3","innerText","importNode","cardNumber","_len","cards","Array","_key","forEach","classList","add","idx","createCard","append","remove","contains","from","innerHTML","_ref6","_ref5","currNumber","bestNumber","CardMap","data","currScore","bestScore","rowLength","colLength","val","_ref10","_ref7","preRow","preCol","_ref9","_ref8","nowRow","nowCol","empty","rowIdx","colIdx","push","self","args","arg","getCard","score","searchEmpty","_len2","_key2","_this","cardMap","_CardMap2","default","$view","roll","nowCardIdx","dir","callback","nowCard","indexOf","hasCard","isFirstIdx","nextCardIdx","nextIdx","getNextIdx","func","nextIdxFunc","seekNextCard","targetIdx","targetCardIdx","isNew","balanceNum","nextCard","cardNum","throwCards","move","deleteCards","insertOneCard","setCard","updateScore","nowCardRowIdx","nowCardColIdx","nextCardRowIdx","nextCardColIdx","isCloser","moveCard","compareCard","msg","Game","_View2","keyCodes","body","addEventListener","e","code","clearThrownCard","deleteLabelNew","randomInsertOneCard","isBookOut","nextStep","idxs","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","key","err","return","showMsg","testNextStep","preventDefault","target","parentElement","hideMsg","start","changed","clear","emptyCells","cellIdx","_random2"],"mappings":"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","file":"js/index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","/**\r\n * 取某个范围的随机数\r\n * @param  {Number} min\r\n * @param  {Number} max\r\n * @return {Number}\r\n */\r\nfunction randomFrom(min, max){\r\n  let temp;\r\n\r\n  if(min > max){\r\n    temp = min;\r\n    min = max;\r\n    max = temp;\r\n  }\r\n\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default randomFrom;","import randomFrom from './random.js';\r\n\r\nclass View{\r\n  /**\r\n   * 管理Dom元素的对象\r\n   * @param  {String} id 元素ID\r\n   * @return {Object}\r\n   */\r\n  constructor(id = '#game'){\r\n    this.$container = document.querySelector(id);\r\n    this.$currScore = this.$container.querySelector('.current .number');\r\n    this.$bestScore = this.$container.querySelector('.best .number');\r\n    this.$msgBoard = this.$container.querySelector('.board .msg');\r\n    this.$cardsBoard = this.$container.querySelector('.board .cardsBoard');\r\n    this.$cardTemp = this.$container.querySelector('#temp').content.children[0];\r\n  }\r\n  /**\r\n   * 移动卡片元素位置\r\n   * @param  {Element} card 卡片元素\r\n   * @param  {Number} [row 卡片位置\r\n   * @param  {Number} col]\r\n   * @return {[type]}\r\n   */\r\n  move(card, [row, col]){\r\n    let rowRe = /\\b(card-row-\\d+)\\b/;\r\n    let colRe = /\\b(card-col-\\d+)\\b/;\r\n    let nowRowClassName = rowRe.exec(card.className)[1];\r\n    let nowColClassName = colRe.exec(card.className)[1];\r\n    let [rowClassName, colclassName] = [`card-row-${row}`,`card-col-${col}`];\r\n    let str = card.className;\r\n    str = str.replace(nowRowClassName, rowClassName);\r\n    str = str.replace(nowColClassName, colclassName);\r\n    card.className = str;\r\n  }\r\n  /**\r\n   * 创建一个卡片Element\r\n   * @param  {Number} [row 卡片位置\r\n   * @param  {Number} col]\r\n   * @param  {Number} num 卡片号码\r\n   * @return {Element} card 卡片元素\r\n   */\r\n  createCard([row, col], num){\r\n    this.$cardTemp.className = `card card-row-${row} card-col-${col} card-num-${num} card-new`;\r\n    this.$cardTemp.innerText = num;\r\n\r\n    let card = document.importNode(this.$cardTemp, true);\r\n\r\n    card.cardNumber = num; // 加入一个定制属性，方便之后读取卡片数值\r\n\r\n    return card;\r\n  }\r\n  /**\r\n   * 作废卡片（压低卡片位置）\r\n   * @param  {Array} cards 卡片数组\r\n   * @return {[type]}\r\n   */\r\n  throwCards(...cards){\r\n    cards.forEach((card) => {\r\n      card.classList.add('card-merged');\r\n    });\r\n  }\r\n  /**\r\n   * 插入一张卡片到DOM里\r\n   * @param  {[type]} idx 卡片位置\r\n   * @param  {[type]} num 卡片号码\r\n   * @return {[type]} 卡片\r\n   */\r\n  insertOneCard(idx, num){\r\n    let card;\r\n\r\n    card = this.createCard(idx, num);\r\n    this.$cardsBoard.append(card);\r\n    return card;\r\n  }\r\n  /**\r\n   * 展示提示框\r\n   * @return {[type]}\r\n   */\r\n  showMsg(){\r\n    this.$msgBoard.classList.add('msg_show');\r\n  }\r\n  /**\r\n   * 隐藏提示框\r\n   * @return {[type]}\r\n   */\r\n  hideMsg(){\r\n    this.$msgBoard.classList.remove('msg_show');\r\n  }\r\n  /**\r\n   * 清除丢弃的卡片\r\n   * @return {[type]}\r\n   */\r\n  clearThrownCard(){\r\n    let children = this.$cardsBoard.children;\r\n    for(let i = children.length - 1; i >= 0; i--){\r\n      if(children[i].classList.contains('card-merged')){\r\n        children[i].remove();\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * 清除卡片的 new 类名\r\n   * @return {[type]}\r\n   */\r\n  deleteLabelNew(){\r\n    Array.from(this.$cardsBoard.children).forEach((card) => {\r\n      if(card.classList.contains('card-new')) card.classList.remove('card-new');\r\n    })\r\n  }\r\n  /**\r\n   * 清除DOM数据\r\n   * @return {[type]}\r\n   */\r\n  clear(){\r\n    this.$cardsBoard.innerHTML = '';\r\n    this.$currScore.innerText = 0;\r\n  }\r\n  /**\r\n   * 更新游戏分数\r\n   * @param  {[type]} [currNumber 现在的分数\r\n   * @param  {[type]} bestNumber] 历史最高分数\r\n   * @return {[type]}\r\n   */\r\n  updateScore([currNumber, bestNumber]){\r\n    this.$currScore.innerText = currNumber;\r\n    if(bestNumber) this.$bestScore.innerText = bestNumber;\r\n  }\r\n}\r\n\r\nexport default View;","class CardMap{\r\n  /**\r\n   * 管理DOM元素卡片数据\r\n   * @return {[type]}\r\n   */\r\n  constructor(){\r\n    this.data = [\r\n      [null, null, null, null],\r\n      [null, null, null, null],\r\n      [null, null, null, null],\r\n      [null, null, null, null]\r\n    ];\r\n    this.currScore = 0;\r\n    this.bestScore = 0;\r\n    this.rowLength = this.data.length;\r\n    this.colLength = this.data[0].length;\r\n  }\r\n  /**\r\n   * 获得某个位置的卡片\r\n   * @param  {[type]} [row 位置\r\n   * @param  {[type]} col]\r\n   * @return {[type]} 卡片元素\r\n   */\r\n  getCard([row, col]){\r\n    return this.data[row][col];\r\n  }\r\n  /**\r\n   * 设置某个位置的卡片\r\n   * @param {[type]} [row 位置\r\n   * @param {[type]} col]\r\n   * @param {[type]} val\r\n   */\r\n  setCard([row, col], val){\r\n    this.data[row][col] = val;\r\n  }\r\n  /**\r\n   * 判断某个位置是否有卡片\r\n   * @param  {[type]}  [row 位置\r\n   * @param  {[type]}  col]\r\n   * @return {Boolean}\r\n   */\r\n  hasCard([row, col]){\r\n    return this.data[row][col] !== null ? true : false;\r\n  }\r\n  /**\r\n   * 移动某个位置的卡片到另一个位置\r\n   * @param  {[type]} [preRow 当前位置\r\n   * @param  {[type]} preCol]\r\n   * @param  {[type]} [nowRow 目标位置\r\n   * @param  {[type]} nowCol]\r\n   * @return {[type]}\r\n   */\r\n  moveCard([preRow, preCol], [nowRow, nowCol]){\r\n    let card = this.data[preRow][preCol];\r\n    this.data[preRow][preCol] = null;\r\n    this.data[nowRow][nowCol] = card;\r\n  }\r\n  /**\r\n   * 寻找空白的卡片位置\r\n   * @return {[type]} 位置数组\r\n   */\r\n  searchEmpty(){\r\n    let empty = [];\r\n\r\n    this.data.forEach((row, rowIdx) => {\r\n      row.forEach((col, colIdx) => {\r\n        if(col === null){\r\n          empty.push([rowIdx, colIdx]);\r\n        }\r\n      });\r\n    });\r\n\r\n    return empty;\r\n  }\r\n  /**\r\n   * 对比两张卡片的号码是否一样\r\n   * @param  {...[type]} args 位置数组\r\n   * @return {[type]}\r\n   */\r\n  balanceNum(...args){\r\n    let cards = [], self = this;\r\n\r\n    args.forEach((arg) => {\r\n      cards.push(self.getCard(arg));\r\n    })\r\n\r\n    return cards[0].cardNumber === cards[1].cardNumber;\r\n  }\r\n  /**\r\n   * 查看某个位置的卡片是否是新生成的\r\n   * @param  {[type]}  idx 位置\r\n   * @return {Boolean}\r\n   */\r\n  isNew(idx){\r\n    return this.getCard(idx).classList.contains('card-new');\r\n  }\r\n  /**\r\n   * 更新分数\r\n   * @param  {[type]} score 要加上的分数\r\n   * @return {[type]} 返回\r\n   */\r\n  updateScore(score){\r\n    this.currScore += score;\r\n    if(this.currScore <= this.bestScore){\r\n      return [this.currScore];\r\n    }else{\r\n      this.bestScore = this.currScore;\r\n      return [this.currScore, this.bestScore];\r\n    }\r\n  }\r\n  isBookOut(){\r\n    return this.searchEmpty().length === 0 ? true : false;\r\n  }\r\n  /**\r\n   * 清除位置中卡片\r\n   * @param  {...[type]} args 位置数组\r\n   * @return {[type]}\r\n   */\r\n  deleteCards(...args){\r\n    let self = this;\r\n    args.forEach((arg) => {\r\n      self.data[arg[0]][arg[1]] = null;\r\n    });\r\n  }\r\n  /**\r\n   * 清除数据\r\n   * @return {[type]}\r\n   */\r\n  clear(){\r\n    this.data.forEach((row, rowIdx) => {\r\n      row.forEach((col, colIdx) => {\r\n        this.data[rowIdx][colIdx] = null;\r\n      });\r\n    });\r\n    this.currScore = 0;\r\n  }\r\n}\r\n\r\nexport default CardMap;","import './index.scss';\r\nimport CardMap from './CardMap.js'; // 管理卡片数据\r\nimport View from './View.js'; // 管理 dom\r\nimport randomFrom from './random.js'; // 产生随机数\r\n\r\n\r\nconst cardMap = new CardMap(); // dom 卡片映射\r\nlet $view; // dom 元素;\r\n\r\n\r\nclass Game{\r\n  constructor(id = '#game'){\r\n    let self = this;\r\n    $view = new View(id);\r\n\r\n    const keyCodes = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight']; // 要处理的键值\r\n\r\n    document.body.addEventListener('keydown', (e) => {\r\n      if(keyCodes.indexOf(e.code) !== -1){\r\n        let changed;\r\n        $view.clearThrownCard(); // 清除上一次合并操作遗留在底部的元素\r\n        $view.deleteLabelNew(); // 清除上一次操作为辨别新旧卡片额外添加的类\r\n        changed = self[e.code](); // 执行这一次操作\r\n        if(changed) self.randomInsertOneCard(); // 随机插入一张新卡片\r\n        if(cardMap.isBookOut()){ // 如果这一些操作后没有空余位置\r\n          testNextStep(); // 测试有没有下一步可行，如果没有则游戏结束\r\n        }\r\n        e.preventDefault();\r\n      }\r\n    });\r\n\r\n    document.body.addEventListener('click', (e) => {\r\n      if(e.target.className === 'restart'){\r\n        if(e.target.parentElement.classList.contains('msg')){ // 如果是提示页面的按钮\r\n          $view.hideMsg(); // 隐藏提示页\r\n        }\r\n        self.start();\r\n      }\r\n    })\r\n\r\n    self.start();\r\n  }\r\n  /**\r\n   * 向上移动\r\n   */\r\n  ArrowUp(){\r\n    let changed = false;\r\n\r\n    for(let colIdx = 0; colIdx < cardMap.colLength; colIdx++){\r\n      for(let rowIdx = 0; rowIdx < cardMap.rowLength; rowIdx++){\r\n        roll([rowIdx, colIdx], 'up', (msg) => {// 如果有改变，则会调用这个函数\r\n          changed = msg;\r\n        });\r\n      }\r\n    }\r\n\r\n    return changed;\r\n  }\r\n  /**\r\n   * 向下移动\r\n   */\r\n  ArrowDown(){\r\n    let changed = false;\r\n\r\n    for(let colIdx = 0; colIdx < cardMap.colLength; colIdx++){\r\n      for(let rowIdx = cardMap.rowLength - 1; rowIdx >= 0; rowIdx--){\r\n        roll([rowIdx, colIdx], 'down', (msg) => {\r\n          changed = msg;\r\n        });\r\n      }\r\n    }\r\n\r\n    return changed;\r\n  }\r\n  /**\r\n   * 向左移动\r\n   */\r\n  ArrowLeft(){\r\n    let changed = false;\r\n\r\n    for(let rowIdx = 0; rowIdx < cardMap.rowLength; rowIdx++){\r\n      for(let colIdx = 0; colIdx < cardMap.colLength; colIdx++){\r\n        roll([rowIdx, colIdx], 'left', (msg) => {\r\n          changed = msg;\r\n        });\r\n      }\r\n    }\r\n\r\n    return changed;\r\n  }\r\n  /**\r\n   * 向右移动\r\n   */\r\n  ArrowRight(){\r\n    let changed = false;\r\n\r\n    for(let rowIdx = 0; rowIdx < cardMap.rowLength; rowIdx++){\r\n      for(let colIdx = cardMap.colLength - 1; colIdx >= 0; colIdx--){\r\n        roll([rowIdx, colIdx], 'right', (msg) => {\r\n          changed = msg;\r\n        });\r\n      }\r\n    }\r\n\r\n    return changed;\r\n  }\r\n  /**\r\n   * 开始游戏\r\n   * @return {[type]}\r\n   */\r\n  start(){\r\n    reset(); //清除存在数据\r\n\r\n    for(let i = 0; i < 2; i++){\r\n      this.randomInsertOneCard();\r\n    }\r\n\r\n    function reset(){\r\n      $view.clear();\r\n      cardMap.clear();\r\n    }\r\n  }\r\n  /**\r\n   * 随机插入一张卡片\r\n   * @return {[type]}\r\n   */\r\n  randomInsertOneCard(){\r\n    let emptyCells = cardMap.searchEmpty(); // 获取可填充位置\r\n    let idx = randomFrom(0, emptyCells.length - 1); // 获取一个要插入卡片的位置的随机索引\r\n    let cellIdx = emptyCells[idx];\r\n    let cardNum = randomCardNum(); // 随机获取作为卡片的数字\r\n    let card = $view.insertOneCard([cellIdx[0] + 1, cellIdx[1] + 1], cardNum);\r\n    cardMap.setCard(cellIdx, card); // 插入到卡片映射；\r\n  }\r\n}\r\n\r\n/**\r\n * 处理卡片匹配、移动等\r\n * @param  {[type]}   nowCardIdx 当前处理的卡片位置\r\n * @param  {[type]}   dir 移动方向\r\n * @param  {Function} callback 改变数据后的回调\r\n * @return {[type]}\r\n */\r\nfunction roll(nowCardIdx, dir, callback){\r\n  let nowCard = cardMap.getCard(nowCardIdx);\r\n\r\n  if(['up', 'down', 'left', 'right'].indexOf(dir) === -1) return false; // 不符合这几个关键字其中一个则不处理\r\n\r\n  if(!cardMap.hasCard(nowCardIdx)) return false; // 如果当前位置没有卡片，则不处理\r\n\r\n  if(isFirstIdx(nowCardIdx, dir)) return false; // 如果当前位置是第一张卡片，则不处理\r\n\r\n  seekNextCard(nowCardIdx, dir, (hasCard, targetIdx) => {\r\n    if(hasCard){\r\n      compareCard(nowCardIdx, targetIdx, (msg) => {\r\n          callback(msg);\r\n      })\r\n    }else{\r\n      $view.move(nowCard, [targetIdx[0] + 1, targetIdx[1] + 1]);\r\n      cardMap.moveCard(nowCardIdx, targetIdx);\r\n      callback(true);\r\n    }\r\n  })\r\n\r\n  /**\r\n   * 查找该方向的底部之前是否有卡片\r\n   * @param  {[type]}   nowCardIdx 当前卡片位置\r\n   * @param  {[type]}   dir 移动方向\r\n   * @param  {Function} callback 如果有的话则第一个参数为true, 第二个参数为找到的卡片的位置，如果没有的话第一个参数为false，第二个参数为该方向最底部位置\r\n   * @return {[type]}\r\n   */\r\n  function seekNextCard(nowCardIdx, dir, callback){\r\n    let nextCardIdx = null, nextIdx;\r\n    let getNextIdx = nextIdxFunc(nowCardIdx, dir);\r\n\r\n    do{\r\n      nextIdx = getNextIdx(); // 获取下一个位置\r\n      if(cardMap.hasCard(nextIdx)) nextCardIdx = nextIdx;\r\n    }while(!isFirstIdx(nextIdx, dir) && !nextCardIdx); // 如果还没到底部而且还没有找到卡片则继续\r\n\r\n    nextCardIdx !== null ? callback(true, nextCardIdx) : callback(false, nextIdx);\r\n\r\n    /**\r\n     * 返回一个函数，用于获取不同方向的下一个位置\r\n     * @param  {[type]} [rowIdx 当前位置\r\n     * @param  {[type]} colIdx]\r\n     * @param  {[type]} dir 移动方向\r\n     * @return {[type]}\r\n     */\r\n    function nextIdxFunc([rowIdx, colIdx], dir){\r\n\r\n      let func;\r\n\r\n      if(dir === 'up'){\r\n        func = function(){ return [--rowIdx, colIdx]};\r\n      }else if(dir === 'down'){\r\n        func = function(){ return [++rowIdx, colIdx]};\r\n      }else if(dir === 'left'){\r\n        func = function(){ return [rowIdx, --colIdx]};\r\n      }else{\r\n        func = function(){ return [rowIdx, ++colIdx]};\r\n      }\r\n      return func;\r\n    }\r\n  }\r\n  /**\r\n   * 对比两张卡片做处理，有改变则调用回调函数\r\n   * @param  {[type]}   nowCardIdx 当前卡片\r\n   * @param  {[type]}   targetCardIdx 最接近当前卡片的卡片\r\n   * @param  {Function} callback 改变数据时的回调\r\n   * @return {[type]}\r\n   */\r\n  function compareCard(nowCardIdx, targetCardIdx, callback){\r\n\r\n    if(!cardMap.isNew(targetCardIdx) && cardMap.balanceNum(nowCardIdx, targetCardIdx)){\r\n      let nextCard = cardMap.getCard(targetCardIdx);\r\n      let cardNum = nowCard.cardNumber;\r\n\r\n      $view.throwCards(nowCard, nextCard); // 下压dom元素\r\n      $view.move(nowCard, [targetCardIdx[0] + 1, targetCardIdx[1] + 1]);\r\n      cardMap.deleteCards(nowCardIdx, targetCardIdx); // 删除映射上的数据\r\n      let card = $view.insertOneCard([targetCardIdx[0] + 1, targetCardIdx[1] + 1], cardNum * 2);\r\n      cardMap.setCard(targetCardIdx, card);\r\n      let score = cardMap.updateScore(cardNum * 2);\r\n      $view.updateScore(score);\r\n      callback(true);\r\n    }else{\r\n      if(!isCloser(nowCardIdx, targetCardIdx, dir)){\r\n        let idx;\r\n\r\n        if(dir === 'up'){\r\n          idx = [targetCardIdx[0] + 1, targetCardIdx[1]];\r\n        }else if(dir === 'down'){\r\n          idx = [targetCardIdx[0] - 1, targetCardIdx[1]];\r\n        }else if(dir === 'left'){\r\n          idx = [targetCardIdx[0], targetCardIdx[1] + 1];\r\n        }else{\r\n          idx = [targetCardIdx[0], targetCardIdx[1] - 1];\r\n        }\r\n        cardMap.moveCard(nowCardIdx, idx);\r\n        $view.move(nowCard, [idx[0] + 1, idx[1] + 1]);\r\n\r\n        callback(true);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * 对比是否为相邻卡片\r\n     * @param  {[type]}  [nowCardRowIdx 当前卡片索引\r\n     * @param  {[type]}  nowCardColIdx]\r\n     * @param  {[type]}  [nextCardRowIdx 下一张卡片索引\r\n     * @param  {[type]}  nextCardColIdx]\r\n     * @param  {[type]}  dir 移动方向\r\n     * @return {Boolean}\r\n     */\r\n    function isCloser([nowCardRowIdx, nowCardColIdx], [nextCardRowIdx, nextCardColIdx], dir){\r\n      if(dir === 'up'){\r\n        return nowCardRowIdx === nextCardRowIdx + 1;\r\n      }else if(dir === 'down'){\r\n        return nowCardRowIdx === nextCardRowIdx - 1;\r\n      }else if(dir === 'left'){\r\n        return nowCardColIdx === nextCardColIdx + 1;\r\n      }else{\r\n        return nowCardColIdx === nextCardColIdx - 1;\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * 查看是否为当前方向最底部的位置\r\n   * @param  {[type]}  [rowIdx 位置\r\n   * @param  {[type]}  colIdx]\r\n   * @param  {[type]}  dir 移动方向\r\n   * @return {Boolean}\r\n   */\r\n  function isFirstIdx([rowIdx, colIdx], dir){\r\n    if(dir === 'up'){\r\n      return rowIdx === 0 ? true : false;\r\n    }else if(dir === 'down'){\r\n      return rowIdx === 3 ? true : false;\r\n    }else if(dir === 'left'){\r\n      return colIdx === 0 ? true : false;\r\n    }else{\r\n      return colIdx === 3 ? true : false;\r\n    }\r\n  }\r\n\r\n}\r\n/**\r\n * 随机生成卡片号码\r\n * @return {[type]}\r\n */\r\nfunction randomCardNum(){\r\n  let num = randomFrom(1, 8);\r\n  return num === 4 ? 4 : 2; // 1/8几率获得4\r\n}\r\n/**\r\n * 测试是否有下一步可走\r\n * @return {[type]}\r\n */\r\nfunction testNextStep(){\r\n  let nextStep = false;\r\n\r\n  for(let rowIdx = 0; rowIdx < cardMap.rowLength; rowIdx++){\r\n    for(let colIdx = 0; colIdx < cardMap.colLength; colIdx++){\r\n      let idxs = [];\r\n\r\n      if(rowIdx - 1 > 0) idxs.push([rowIdx - 1, colIdx]);\r\n      if(rowIdx + 1 < 3) idxs.push([rowIdx + 1, colIdx]);\r\n      if(colIdx - 1 > 0) idxs.push([rowIdx, colIdx - 1]);\r\n      if(colIdx + 1 < 3) idxs.push([rowIdx, colIdx + 1]);\r\n\r\n      for(let key of idxs){\r\n        if(cardMap.balanceNum([rowIdx, colIdx], key)){\r\n          nextStep = true;\r\n          break;\r\n        }\r\n      }\r\n      if(nextStep) break;\r\n    }\r\n    if(nextStep) break;\r\n  }\r\n\r\n  if(!nextStep){\r\n    $view.showMsg();\r\n  }\r\n}\r\n\r\n\r\nlet game = new Game();"],"sourceRoot":""}